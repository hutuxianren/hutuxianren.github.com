---
layout: post
comments: true
share: true
title: "操作系统"
tags: 操作系统
---

##名词解释
- 写时拷贝:只有在修改数据时才进行拷贝，是一种可以推迟甚至免除拷贝数据的技术。操作系统中使用fork()时利用写时拷贝技术，在创建子进程时不需要拷贝数据给子进程，父子进程只读共享的数据和空间，只有在数据写入时才拷贝数据。
- 内核抢占:在内核2.6版本之后，内核是可抢占式的。当一个进程在内核空间时，只要确保该进程没有持有锁，允许一个更高优先级的进程打断正在运行的进程。
- 延时写:写数据先往高速缓冲上写数据，对缓冲区设置延迟写标志，等到高速缓冲延迟满时再往磁盘上写数据。
- 系统调用:systemcall，是系统内建接口函数的集合，用于完成一些系统级别的功能。系统调用是用户到内核的转换，可用来访问硬件和其它操作系统资源。除了异常和陷入，系统调用是用户进入内核唯一合法手段。
- 内核模块:内核在需要新加入功能时，要对内核全部重新编译，为了解决这个问题，linux引入了内核模块机制。模块是一个已经编译但未连接的可执行文件，从内核角度，内核模块是一个编译好，运行时连接的文件，包含至少两个函数的代码段；从用户角度，内核模块是内核的一个插口，需要时添加，不需要时删除。
- 内核线程:独立运行在内核的标准进程，可以被调度和抢占，没有独立的地址空间，用来完成内核后台任务，且只能由内核线程创建。
- current宏:用于内核模块获取当前的进程结构体。
- proc文件系统:/proc系统是一个虚拟文件系统，它存在于内存而不是硬盘上，是内核和内核模块用来向进程发送信息的机制。该系统使得你可以和内核数据结构进行交互，获得进程有关信息，在运行时改变配置。
- 原子变量：对一个变量的操作是原子的，即不可打断的，是原子操作的基本单位。
- 进程上下文和中断上下文:进程上下文是指进程切换到另一个进程时保存当前进程的所有状态，以便再次执行该进程时，能恢复切换时的状态。而中断上下文是中断时保存的中断信息，在内核态执行中断服务，同时保留所有需要用到的资源，以便中断服务结束时能恢复被中断进程的执行。
- 上下文切换:从一个可执行进程切换到另一个可执行进程。由context_switch函数执行。完成两件事:①把虚拟内存从上一个进程映射到新的进程中②从上一个进程的处理器状态切换到新进程的处理器状态，包括保存寄存器等信息。
- 进程时间片:进程在被强占前所能持续运行的时间。预加载调度:200ms,还能根据进程优先级动态调整时间片。
- 中断机制:当硬件处理I/O时,cpu不必马上对它进行处理，而是由中断机制去处理，等硬件完全完成请求后，再通知内核回头来处理。
- 触发软中断:一个__注册的__软中断必须被标记后才能执行，通常中断处理程序会在返回前标记它的软中断。
- 临界区:访问和操作共享数据的代码段，整个临界区是个不可分割的指令。
- 竞争条件:多个进程并发访问和操作同一数据且执行结果与访问的特定顺序有关。
- 同步:避免并发和防止竞争条件称为同步。
- 争用:锁的争用，当线程持有锁时，其它线程试图获得锁。
- 死锁:每个线程都在等待其它线程释放资源，但这些资源都被占有，且各个进程永远不放弃，于是任何线程都无法继续，这就是死锁。
- 屏障:确保顺序要求的机器指令，所有可能重新排序和写的处理器提供了机器指令来确保顺序要求，同时指示编译器不对给定点周围的指令序列进行重新排序。
- 软实时:内核调度进程，尽量使它在限定时间内运行，但内核不保证总能满足进程要求。 举例:软实时系统的时限是一个柔性灵活的，它可以容忍偶然的超时错误。失败造成的后果并不严重，仅仅是轻微的降低了系统的吞吐量。如播放DVD成功率98%就可以接受。
- 索引节点:一种数据结构，保存文件对象的元信息，但不包含数据。